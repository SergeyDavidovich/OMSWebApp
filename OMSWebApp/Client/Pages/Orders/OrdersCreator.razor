@layout OrdersLayout
@page "/orders/orderscreator"

@using System.Collections.ObjectModel
@using System.ComponentModel;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using OMSWebApp.Shared.Models
@using OMSWebApp.Client.Components

@inject HttpClient client

<h5>CREATION</h5>

<div id="grid">
    <div class="shadow" style="cursor:pointer">
        <SfGrid DataSource="@products" Height="600" Width="auto" AllowPaging="false" AllowSelection="true" EnableHover="false">
            <GridSelectionSettings CheckboxMode="CheckboxSelectionType.Default" Type="SelectionType.Multiple" EnableToggle="true"></GridSelectionSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="50" HeaderText="#">
                    <HeaderTemplate>
                    </HeaderTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(Product.ProductId) HeaderText="ID"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="50"></GridColumn>
                <GridColumn Field=@nameof(Product.ProductName) HeaderText="PRODUCT NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" AutoFit="false" Width="160"></GridColumn>
                <GridColumn Field=@nameof(Product.UnitPrice) HeaderText="UNIT PRICE"
                            HeaderTextAlign="TextAlign.Left" Format="N2" TextAlign="TextAlign.Right" AutoFit="false" Width="120"></GridColumn>
                <GridColumn Field=@nameof(Product.UnitsInStock) HeaderText="IN STOCK"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Center" AutoFit="false" Width="120"></GridColumn>
            </GridColumns>
            <GridEvents RowSelected="RowSelectedHandle" RowDeselected="RowDeselectedHandle" TValue="Product"></GridEvents>
        </SfGrid>
    </div>
    <div class="card shadow" style="cursor:pointer">
        <SfGrid DataSource="@selectedDetails" Height="600" Width="auto" EnableHover="false">
            <GridColumns>
                <GridColumn Field=@nameof(OrderDetail.ProductId) HeaderText="PRODUCT ID"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="120"></GridColumn>
                <GridColumn Field=@nameof(OrderDetail.Quantity) HeaderText="QUANTITY"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" AutoFit="false" Width="160"></GridColumn>
                <GridColumn Field=@nameof(OrderDetail.UnitPrice) HeaderText="UNIT PRICE"
                            HeaderTextAlign="TextAlign.Left" Format="N2" TextAlign="TextAlign.Right" AutoFit="false" Width="120"></GridColumn>
                <GridColumn Field=@nameof(OrderDetail.Discount) HeaderText="DISCOUNT"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Center" AutoFit="false" Width="120"></GridColumn>
            </GridColumns>
            <GridEvents TValue="OrderDetail"></GridEvents>
        </SfGrid>
    </div>
    <div class="shadow">
        <Invoice Order="new Order() { OrderId=1}"></Invoice>
    </div>
</div>

@code {
    List<Product> products;
    ObservableCollection<OrderDetail> selectedDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        selectedDetails = new ObservableCollection<OrderDetail>();
        products = await client.GetFromJsonAsync<List<Product>>("api/products");
    }

    public void RowSelectedHandle(RowSelectEventArgs<Product> args)
    {
        var selectedProduct = args.Data;


        if (selectedDetails.FirstOrDefault(od => od.ProductId == selectedProduct.ProductId) == null)
        {
            var createdOrderDetail = new OrderDetail()
            {
                ProductId = selectedProduct.ProductId,
                UnitPrice = selectedProduct.UnitPrice.Value,
                Quantity = 1,
                Discount = 0,
                Product = selectedProduct
            };
            selectedDetails.Add(createdOrderDetail);
        }
    }

    public void RowDeselectedHandle(RowDeselectEventArgs<Product> args)
    {
        var deselectedProduct = args.Data;

        var deletedDetail = selectedDetails
           .Where(d => d.ProductId == deselectedProduct.ProductId).SingleOrDefault<OrderDetail>();

        if (selectedDetails.Count() != 0)
        {
            selectedDetails.Remove(deletedDetail);
        }
    }
}

<style>
    #grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-gap: 1vw;
    }

        #grid > div {
            padding: .5em;
            text-align: left;
            background-color: white;
        }
</style>
