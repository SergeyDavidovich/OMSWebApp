@layout OrdersLayout

@page "/orders/ordersjournal"

@using Syncfusion.Blazor.Grids
@using OMSWebApp.Shared.Models

@inject HttpClient client


<h5>Orders journal</h5>
<div id="grid">

    <div>
        @if (orders == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <SfGrid DataSource="@orders" AllowPaging="true" AllowSelection="true" EnableAltRow="true">
                <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Order.OrderId) HeaderText="ORDER ID"
                                HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(Order.OrderDate) HeaderText="ORDER DATE"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(Order.CustomerId) HeaderText="CUSTOMER"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipCity) HeaderText="SHIP SITY"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="SHIP COUNTRY"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipAddress) HeaderText="SHIPPING ADDRESS"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="true" Width="250"></GridColumn>
                </GridColumns>
                <GridEvents RowSelected="RowSelectedHandler" TValue="Order"></GridEvents>
            </SfGrid>
        }
    </div>
    <div>
        <p>Order Id : @selectedOrderId </p>
        <p>Customer Id: @customerId</p>
        <p>Order date: @orderDate</p>

        <p>Order path: @orderPath</p>

        @if (orderDetails == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <SfGrid DataSource="@orderDetails">
                <GridColumns>
                    <GridColumn Field="@nameof(OrderDetail.OrderId)" HeaderText="Order id"></GridColumn>
                    <GridColumn Field="@nameof(OrderDetail.ProductId)" HeaderText="Product id"></GridColumn>
                    <GridColumn Field="@nameof(OrderDetail.UnitPrice)" HeaderText="Unit price"></GridColumn>
                    <GridColumn Field="@nameof(OrderDetail.Discount)" HeaderText="Discount"></GridColumn>
                </GridColumns>
            </SfGrid>
        }
    </div>
</div>

@code {

    List<Order> orders;
    Order selectedOrder;
    List<OrderDetail> orderDetails;
    string orderPath;

    string selectedOrderId;
    string customerId;
    string orderDate;

    protected override async Task OnInitializedAsync()
    {
        //#if DEBUG
        //        await Task.Delay(10000);
        //#endif

        orders = await client.GetFromJsonAsync<List<Order>>("api/orders");
    }

    public void RowSelectedHandler(RowSelectEventArgs<Order> args)
    {
        selectedOrderId = args.Data.OrderId.ToString();

        selectedOrder = orders.Find(o => o.OrderId == int.Parse(selectedOrderId));

        customerId = selectedOrder.CustomerId;
        orderDate = selectedOrder.OrderDate.ToString();


        orderDetails = selectedOrder.OrderDetails.ToList<OrderDetail>();

        StateHasChanged();
    }
}

<style>
    #grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        grid-template-rows: 1fr 1fr;
        grid-gap: 2vw;
    }

        #grid > div {
            padding: .5em;
            text-align: left;
        }
</style>


