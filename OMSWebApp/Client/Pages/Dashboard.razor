@page "/dashboard"

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using OMSWebApp.Shared.StatisticsObjects;
@using OMSWebApp.Client.Components;

@inject HttpClient client

<div id="grid-dashboard">
    <div id="grid-cards">
        <div class="shadow">
            <div class="cardtitle">OVERALL ORDERS QUANTITY</div>
            <div id="cardcontent">3455</div>
            <hr style="height:0; background-color:lightgray" />
            <div id="cardfooter">(for @currenYear year)</div>
        </div>
        <div class="shadow">
            <div class="cardtitle">MAX CHECK</div>
            <div id="cardcontent">$ 5345.56</div>
            <hr style="height:0; background-color:lightgray" />
            <div id="cardfooter">(for @currenYear year)</div>
        </div>
        <div class="shadow">
            <div class="cardtitle">MAX CHECK</div>
            <div id="cardcontent">$ 5345.56</div>
            <hr style="height:0; background-color:lightgray" />
            <div id="cardfooter">(for @currenYear year)</div>
        </div>
        <div class="shadow">
            <div class="cardtitle">MAX CHECK</div>
            <div id="cardcontent">$ 5345.56</div>
            <hr style="height:0; background-color:lightgray" />
            <div id="cardfooter">(for @currenYear year)</div>
        </div>
        <div class="shadow">
            <div class="cardtitle">MAX CHECK</div>
            <div id="cardcontent">$ 5345.56</div>
            <hr style="height:0; background-color:lightgray" />
            <div id="cardfooter">(for @currenYear year)</div>
        </div>
    </div>

    <div id="grid-accumulategraphs">
        @if (ordersByCountry == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfAccumulationChart Title="ORDERS BY COUNTRIES (TOP 10)" EnableAnimation="false" EnableSmartLabels="true">
                    <AccumulationChartAnnotations>
                        <AccumulationChartAnnotation X="50%" Y="44%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                            <ContentTemplate>
                                <div>
                                    <div style="font-size:16px; border-bottom:1px solid black">TOTAL ORDERS</div>
                                    <div style="height:auto; width:auto; font-size:42px; text-align:center; color:crimson;">@totalOrders</div>
                                </div>
                            </ContentTemplate>
                        </AccumulationChartAnnotation>
                    </AccumulationChartAnnotations>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@ordersByCountry" XName="CountryName" YName="OrdersCount" Name="Country" ExplodeOffset="22" Explode="true" InnerRadius="60%">
                            <AccumulationDataLabelSettings Visible="true" Name="users" Position="AccumulationLabelPosition.Inside">
                                <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                            </AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="@ShowLegend" Background="whitesmoke" Position="LegendPosition.Bottom"></AccumulationChartLegendSettings>
                    <AccumulationChartEvents OnAnimationComplete="@AnimationHandler"></AccumulationChartEvents>
                </SfAccumulationChart>
            </div>
        }
        @if (salesByCategories == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfAccumulationChart Title="SALES BY CATEGORIES" EnableAnimation="false" EnableSmartLabels="true">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@salesByCategories" XName="CategoryName" YName="SalesSum" Name="Category" ExplodeOffset="22" Explode="true" InnerRadius="0">
                            <AccumulationDataLabelSettings Visible="true" Name="users" Position="AccumulationLabelPosition.Inside">
                                <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                            </AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="@ShowLegend" Background="whitesmoke" Position="LegendPosition.Bottom"></AccumulationChartLegendSettings>
                    <AccumulationChartEvents OnAnimationComplete="@AnimationHandler"></AccumulationChartEvents>
                </SfAccumulationChart>
            </div>
        }
        @if (customersByCountries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfAccumulationChart Title="CUSTOMERS BY COUNTRIES" EnableAnimation="false" EnableSmartLabels="true">
                    <AccumulationChartAnnotations>
                        <AccumulationChartAnnotation X="66%" Y="18%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                            <ContentTemplate>
                                <div>
                                    <div style="font-size:14px; text-align:right">TOTAL SUM</div>
                                    <div style="height:auto; width:auto; font-size:34px; text-align:right; color:crimson;">$456123</div>
                                </div>
                            </ContentTemplate>
                        </AccumulationChartAnnotation>
                    </AccumulationChartAnnotations>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@customersByCountries" XName="CountryName" YName="CustomerCount" Name="Country" ExplodeOffset="22" Explode="true"
                                                 InnerRadius="30" StartAngle="270" EndAngle="90">
                            <AccumulationDataLabelSettings Visible="true" Name="users" Position="AccumulationLabelPosition.Inside">
                                <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                            </AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="@ShowLegend" Background="whitesmoke" Position="LegendPosition.Bottom"></AccumulationChartLegendSettings>
                    <AccumulationChartEvents OnAnimationComplete="@AnimationHandler"></AccumulationChartEvents>
                </SfAccumulationChart>
            </div>
        }
        @if (productsByCategories == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfAccumulationChart Title="PRODUCTS BY CATEGORIES" EnableAnimation="false" EnableSmartLabels="true">
                    <AccumulationChartAnnotations>
                        <AccumulationChartAnnotation X="66%" Y="18%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                            <ContentTemplate>
                                <div>
                                    <div style="font-size:14px; text-align:right">TOTAL SUM</div>
                                    <div style="height:auto; width:auto; font-size:34px; text-align:right; color:crimson;">$456123</div>
                                </div>
                            </ContentTemplate>
                        </AccumulationChartAnnotation>
                    </AccumulationChartAnnotations>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@productsByCategories" XName="CategoryName" YName="ProductsCount" Name="Category" ExplodeOffset="22" Explode="true" InnerRadius="30"
                                                 StartAngle="270" EndAngle="90">
                            <AccumulationDataLabelSettings Visible="true" Name="users" Position="AccumulationLabelPosition.Inside">
                                <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                            </AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="@ShowLegend" Background="whitesmoke" Position="LegendPosition.Bottom"></AccumulationChartLegendSettings>
                    <AccumulationChartEvents OnAnimationComplete="@AnimationHandler"></AccumulationChartEvents>
                </SfAccumulationChart>
            </div>
        }
    </div>

    <div id="grid-bargraphs">
        @if (salesByCountries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div id="item1" class="shadow">
                <SfChart Width="100%" Height="200px">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@salesByCountries" XName="CountryName" YName="CountrySum" ColumnSpacing="0.2" ColumnWidth="0.7" Type="ChartSeriesType.Bar">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
        }
        @if (salesByCountries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfChart Width="100%" Height="200px">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@salesByEmployees" XName="LastName" YName="SalesSum" ColumnSpacing="0.2" ColumnWidth="0.7" Type="ChartSeriesType.Bar">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
        }
        @if (salesByCountries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="shadow">
                <SfChart Width="100%" Height="200px">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@purchasesByCustomers" XName="CustomerName" YName="PurchaseSum" ColumnSpacing="0.2" ColumnWidth="0.7" Type="ChartSeriesType.Bar">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>
        }
    </div>
</div>

<style>
    #grid-dashboard {
        display: grid;
        background-color: cornflowerblue;
        grid-template-rows: .3fr 1fr auto;
        grid-gap: 10px;
        height: calc(100vh - 100px);
        overflow: auto;
    }
    #grid-cards {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
        grid-gap: 10px;
    }
        #grid-cards > div {
            padding: 10px;
            background-color: white;
            height: auto;
        }
    #grid-accumulategraphs {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        grid-gap: 10px;
    }
    #grid-bargraphs {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-column-gap: 10px;
    }
    #cardtitle {
        font-size: 16px;
        text-align: left;
        font-weight: 100;
        color: darkblue;
    }

    #cardcontent {
        font-size: 38px;
        text-align: left;
        font-weight: normal;
        color: crimson;
    }

    #cardfooter {
        font-size: 12px;
        text-align: right;
        font-weight: normal;
        color: darkblue;
    }
</style>

@code
{
    #region

    int currenYear;
    int totalOrders;
    List<OrdersByCountry> ordersByCountry;
    List<SalesByCategory> salesByCategories;
    List<CustomersByCountry> customersByCountries;
    List<ProductsByCategory> productsByCategories;
    List<SalesByCountry> salesByCountries;
    List<SalesByEmployee> salesByEmployees;
    List<PurchasesByCustomer> purchasesByCustomers;


    protected override async Task OnInitializedAsync()
    {
        currenYear = DateTime.Now.Year;

        ordersByCountry = await client.GetFromJsonAsync<List<OrdersByCountry>>("api/statistics/GetOrdersByCountries");
        salesByCategories = await client.GetFromJsonAsync<List<SalesByCategory>>("api/Statistics/GetSalesByCategories");
        customersByCountries = await client.GetFromJsonAsync<List<CustomersByCountry>>("api/Statistics/GetCustomersByCountries");
        productsByCategories = await client.GetFromJsonAsync<List<ProductsByCategory>>("api/Statistics/GetProductsByCategories");
        salesByCountries = await client.GetFromJsonAsync<List<SalesByCountry>>("api/Statistics/GetSalesByCountries");
        salesByEmployees = await client.GetFromJsonAsync<List<SalesByEmployee>>("api/Statistics/GetSalesByEmployees");
        purchasesByCustomers = await client.GetFromJsonAsync<List<PurchasesByCustomer>>("api/Statistics/GetPurchasesByCustomers");


        totalOrders = ordersByCountry.Sum(o => o.OrdersCount);
    }

    //    public class ChartData
    //    {
    //        public string X;
    //        public double YValue;
    //        public double YValue1;
    //    }
    //    public List<ChartData> MedalDetails = new List<ChartData>
    //{
    //        new ChartData { X= "USA", YValue= 46, YValue1=56 },
    //        new ChartData { X= "GBR", YValue= 27, YValue1=17 },
    //        new ChartData { X= "CHN", YValue= 26, YValue1=36 },
    //        new ChartData { X= "UK", YValue= 56,  YValue1=16 },
    //        new ChartData { X= "AUS", YValue= 12, YValue1=46 },
    //        new ChartData { X= "IND", YValue= 26, YValue1=16 },
    //        new ChartData { X= "DEN", YValue= 26, YValue1=12 },
    //        new ChartData { X= "MEX", YValue= 34, YValue1=32},
    //    };
    //    public class ChartData1
    //    {
    //        public string Country;
    //        public double Gold;
    //        public double Silver;
    //        public double Bronze;
    //    }
    //    public List<ChartData1> MedalDetails1 = new List<ChartData1>
    //{
    //        new ChartData1{ Country= "USA", Gold=50, Silver=70, Bronze=45 },
    //        new ChartData1{ Country="China", Gold=40, Silver= 60, Bronze=55 },
    //        new ChartData1{ Country= "Japan", Gold=70, Silver= 60, Bronze=50 },
    //        new ChartData1{ Country= "Australia", Gold=60, Silver= 56, Bronze=40 },
    //        new ChartData1{ Country= "France", Gold=50, Silver= 45, Bronze=35 },
    //        new ChartData1{ Country= "Germany", Gold=40, Silver=30, Bronze=22 },
    //        new ChartData1{ Country= "Italy", Gold=40, Silver=35, Bronze=37 },
    //        new ChartData1{ Country= "Sweden", Gold=30, Silver=25, Bronze=27 }
    //    };

    bool ShowLegend = false;
    public void AnimationHandler(IAccAnimationCompleteEventArgs args)
    {
        ShowLegend = true;
    }
    #endregion
}
