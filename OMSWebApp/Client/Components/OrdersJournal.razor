@using Syncfusion.Blazor.Grids
@using OMSWebApp.Shared.Models
@using OMSWebApp.Client.Components

@inject HttpClient client

<div id="grid">
    <div class="shadow" style="cursor:pointer">
        <div class="card-body">
            <SfGrid DataSource="@orders" AllowPaging="true" AllowSelection="true" EnableAltRow="true" Height="600px">
                <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
                <GridPageSettings PageCount="10"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Order.OrderId) HeaderText="ORDER ID"
                                HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(Order.OrderDate) HeaderText="ORDER DATE"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(Order.CustomerId) HeaderText="CUSTOMER"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipCity) HeaderText="SHIP SITY"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="SHIP COUNTRY"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.ShipAddress) HeaderText="SHIPPING ADDRESS"
                                HeaderTextAlign="TextAlign.Left" Format="D" TextAlign="TextAlign.Left" AutoFit="true" Width="250"></GridColumn>
                </GridColumns>
                <GridEvents RowSelected="RowSelectedHandler" TValue="Order"></GridEvents>
            </SfGrid>
        </div>
    </div>
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title"><span>ORDER ID : </span><span class="font-weight-bold">@orderId</span></h5>
            <p class="card-text"><span>CUSTOMER ID: </span><span class="font-weight-bold">@customerId</span></p>
            <p class="card-text"><span>ORDER DATE: </span><span class="font-weight-bold">@orderDate</span></p>
            <p class="card-text"><span>EMPLOYEE ID: </span><span class="font-weight-bold">@employeeId</span></p>
            <div class="card-body">
                <SfGrid DataSource="@orderDetails">
                    <GridColumns>
                        <GridColumn Field="@nameof(OrderDetail.ProductId)" HeaderText="PRODUCT ID"></GridColumn>
                        <GridColumn Field="@nameof(OrderDetail.UnitPrice)" HeaderText="UNIT PRICE" Format="n2"></GridColumn>
                        <GridColumn Field="@nameof(OrderDetail.Quantity)" HeaderText="QUANTITY"></GridColumn>
                        <GridColumn Field="@nameof(OrderDetail.Discount)" HeaderText="DISCOUNT"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
            <div>
                <p class="align-bottom text-md-right"><span>TOTAL: </span><span class="font-weight-bold">@totalOrder</span></p>
            </div>
        </div>
    </div>
</div>

<style>
    #grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        grid-template-rows: 1fr 1fr;
        grid-gap: 1vw;
    }

        #grid > div {
            padding: .5em;
            text-align: left;
            background-color: white;
            height: 740px;
        }
</style>

@code {
    #region 

    List<Order> orders;
    List<OrderDetail> orderDetails;

    string orderId;
    string customerId;
    string orderDate;
    string employeeId;
    string totalOrder;

    protected override async Task OnInitializedAsync()
    {
        orders = await client.GetFromJsonAsync<List<Order>>("api/orders");
    }

    public void RowSelectedHandler(RowSelectEventArgs<Order> args)
    {
        var id = args.Data.OrderId;

        var order = orders.First<Order>(o => o.OrderId == id);

        orderId = order.OrderId.ToString();
        customerId = order.CustomerId;
        orderDate = order.OrderDate.ToString();
        employeeId = order.EmployeeId.ToString();

        orderDetails = order.OrderDetails.ToList<OrderDetail>();

        double total = orderDetails.Select(o => new
        {
            subtotal = (double)o.UnitPrice * o.Quantity * (1 - o.Discount)
        }).Sum(s => s.subtotal);

        totalOrder = String.Format("{0:F}", total);
    }
#endregion
}



